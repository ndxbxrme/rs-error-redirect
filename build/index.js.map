{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,OAAA,EAAA;;EAAA,UAAA,GAAa;;EACb,OAAA,GAAU,MAAM,CAAC,OAAP,IAAkB,OAAA,CAAQ,SAAR;;EAC5B,OAAO,CAAC,MAAR,CAAe,UAAf,EAA2B,CACzB,YADyB,EAEzB,SAFyB,CAA3B,CAIA,CAAC,QAJD,CAIU,eAJV,EAI2B,QAAA,CAAA,CAAA;WACzB;MAAA,IAAA,EAAM,QAAA,CAAC,MAAD,EAAS,QAAT,EAAmB,EAAnB,EAAuB,SAAvB,EAAkC,OAAlC,CAAA;eACJ;UAAA,OAAA,EAAS,QAAA,CAAC,MAAD,CAAA;AACP,gBAAA,IAAA,EAAA,KAAA,EAAA;YAAA,KAAA,GAAQ,EAAE,CAAC,KAAH,CAAA;YACR,IAAG,UAAU,CAAC,IAAX,CAAgB,MAAM,CAAC,GAAvB,CAAH;cACE,KAAA,GAAQ,OAAO,CAAC,GAAR,CAAY,OAAZ;cACR,IAAG,KAAA,IAAU,IAAI,IAAJ,CAAS,KAAK,CAAC,OAAf,CAAA,GAA0B,IAAI,IAAJ,CAAA,CAAvC;gBACE,MAAM,CAAC,OAAO,CAAC,aAAf,GAA+B,SAAA,GAAY,KAAK,CAAC;gBACjD,KAAK,CAAC,OAAN,CAAc,MAAd,EAFF;eAAA,MAAA;gBAIE,IAAA,GAAO,SAAS,CAAC,GAAV,CAAc,MAAd;gBACP,IAAI,CAAC,YAAL,CAAkB,KAAlB,CACA,CAAC,IADD,CACM,QAAA,CAAC,QAAD,CAAA;kBACJ,MAAM,CAAC,OAAO,CAAC,aAAf,GAA+B,QAAQ,CAAC;yBACxC,KAAK,CAAC,OAAN,CAAc,MAAd;gBAFI,CADN,EALF;eAFF;aAAA,MAAA;cAYE,KAAK,CAAC,OAAN,CAAc,MAAd,EAZF;;mBAaA,KAAK,CAAC;UAfC,CAAT;UAgBA,QAAA,EAAU,QAAA,CAAC,GAAD,CAAA;YACR,IAAG,GAAG,CAAC,IAAJ,KAAY,cAAf;cACE,GAAG,CAAC,MAAJ,GAAa;cACb,MAAM,CAAC,EAAP,CAAU,OAAV,EAFF;;mBAGA;UAJQ,CAhBV;UAqBA,aAAA,EAAe,QAAA,CAAC,SAAD,CAAA;YACb,IAAG,SAAS,CAAC,MAAV,KAAoB,GAAvB;cACE,QAAA,CAAS,QAAA,CAAA,CAAA;uBACP,MAAM,CAAC,EAAP,CAAU,OAAV;cADO,CAAT,EADF;;mBAGA;UAJa;QArBf;MADI;IAAN;EADyB,CAJ3B,CAgCA,CAAC,MAhCD,CAgCQ,QAAA,CAAC,aAAD,CAAA;WACN,aAAa,CAAC,YAAY,CAAC,OAA3B,CAAmC,eAAnC;EADM,CAhCR,CAkCA,CAAC,GAlCD,CAkCK,QAAA,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,EAAgC,IAAhC,CAAA;WACH,YAAY,CAAC,QAAb,CAAsB,CAAA,CAAtB,EAA0B,QAAA,CAAC,KAAD,CAAA;AACxB,UAAA;MAAA,IAAI,CAAC,YAAL,CAAkB,KAAK,CAAC,SAAxB,wCAAmD,CAAE,aAArD;aACA,KAAK,CAAC;IAFkB,CAA1B;EADG,CAlCL;;EAsCA,MAAM,CAAC,OAAP,GAAiB;AAxCjB",
  "sourcesContent": [
    "moduleName = 'rs-error-redirect'\r\nangular = window.angular or require 'angular'\r\nangular.module moduleName, [\r\n  'rs-storage'\r\n  'rs-auth'\r\n]\r\n.provider 'errorRedirect', ->\r\n  $get: ($state, $timeout, $q, $injector, storage) ->\r\n    request: (config) ->\r\n      defer = $q.defer()\r\n      if /^\\/api\\//.test config.url\r\n        token = storage.get 'token'\r\n        if token and new Date(token.expires) > new Date()\r\n          config.headers.Authorization = 'Bearer ' + token.accessToken\r\n          defer.resolve config\r\n        else\r\n          auth = $injector.get 'auth'\r\n          auth.refreshToken token\r\n          .then (newToken) ->\r\n            config.headers.Authorization = newToken.accessToken\r\n            defer.resolve config\r\n      else\r\n        defer.resolve config\r\n      defer.promise\r\n    response: (res) ->\r\n      if res.data is 'unauthorized'\r\n        res.status = 401\r\n        $state.go 'login'\r\n      res\r\n    responseError: (rejection) ->\r\n      if rejection.status is 401\r\n        $timeout ->\r\n          $state.go 'login'\r\n      rejection\r\n.config ($httpProvider) ->\r\n  $httpProvider.interceptors.unshift 'errorRedirect'\r\n.run ($transitions, $timeout, $http, auth) ->\r\n  $transitions.onBefore {}, (trans) ->\r\n    auth.refreshLogin trans._deferred, trans.$to().data?.auth\r\n    trans.promise\r\nmodule.exports = moduleName"
  ]
}